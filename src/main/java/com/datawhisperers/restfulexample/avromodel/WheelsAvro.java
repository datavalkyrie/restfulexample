/**
 * Autogenerated by Avro
 *
 * DO NOT EDIT DIRECTLY
 */
package com.datawhisperers.restfulexample.avromodel;

import org.apache.avro.generic.GenericArray;
import org.apache.avro.specific.SpecificData;
import org.apache.avro.util.Utf8;
import org.apache.avro.message.BinaryMessageEncoder;
import org.apache.avro.message.BinaryMessageDecoder;
import org.apache.avro.message.SchemaStore;

@org.apache.avro.specific.AvroGenerated
public class WheelsAvro extends org.apache.avro.specific.SpecificRecordBase implements org.apache.avro.specific.SpecificRecord {
  private static final long serialVersionUID = 5907707184916604379L;
  public static final org.apache.avro.Schema SCHEMA$ = new org.apache.avro.Schema.Parser().parse("{\"type\":\"record\",\"name\":\"WheelsAvro\",\"namespace\":\"com.datawhisperers.restfulexample.avromodel\",\"fields\":[{\"name\":\"frontRight\",\"type\":{\"type\":\"string\",\"java-class\":\"java.math.BigDecimal\"}},{\"name\":\"frontLeft\",\"type\":{\"type\":\"string\",\"java-class\":\"java.math.BigDecimal\"}},{\"name\":\"backRight\",\"type\":{\"type\":\"string\",\"java-class\":\"java.math.BigDecimal\"}},{\"name\":\"backLeft\",\"type\":{\"type\":\"string\",\"java-class\":\"java.math.BigDecimal\"}}]}");
  public static org.apache.avro.Schema getClassSchema() { return SCHEMA$; }

  private static SpecificData MODEL$ = new SpecificData();
static {
    MODEL$.addLogicalTypeConversion(new org.apache.avro.Conversions.DecimalConversion());
  }

  private static final BinaryMessageEncoder<WheelsAvro> ENCODER =
      new BinaryMessageEncoder<WheelsAvro>(MODEL$, SCHEMA$);

  private static final BinaryMessageDecoder<WheelsAvro> DECODER =
      new BinaryMessageDecoder<WheelsAvro>(MODEL$, SCHEMA$);

  /**
   * Return the BinaryMessageEncoder instance used by this class.
   * @return the message encoder used by this class
   */
  public static BinaryMessageEncoder<WheelsAvro> getEncoder() {
    return ENCODER;
  }

  /**
   * Return the BinaryMessageDecoder instance used by this class.
   * @return the message decoder used by this class
   */
  public static BinaryMessageDecoder<WheelsAvro> getDecoder() {
    return DECODER;
  }

  /**
   * Create a new BinaryMessageDecoder instance for this class that uses the specified {@link SchemaStore}.
   * @param resolver a {@link SchemaStore} used to find schemas by fingerprint
   * @return a BinaryMessageDecoder instance for this class backed by the given SchemaStore
   */
  public static BinaryMessageDecoder<WheelsAvro> createDecoder(SchemaStore resolver) {
    return new BinaryMessageDecoder<WheelsAvro>(MODEL$, SCHEMA$, resolver);
  }

  /**
   * Serializes this WheelsAvro to a ByteBuffer.
   * @return a buffer holding the serialized data for this instance
   * @throws java.io.IOException if this instance could not be serialized
   */
  public java.nio.ByteBuffer toByteBuffer() throws java.io.IOException {
    return ENCODER.encode(this);
  }

  /**
   * Deserializes a WheelsAvro from a ByteBuffer.
   * @param b a byte buffer holding serialized data for an instance of this class
   * @return a WheelsAvro instance decoded from the given buffer
   * @throws java.io.IOException if the given bytes could not be deserialized into an instance of this class
   */
  public static WheelsAvro fromByteBuffer(
      java.nio.ByteBuffer b) throws java.io.IOException {
    return DECODER.decode(b);
  }

  @Deprecated public java.math.BigDecimal frontRight;
  @Deprecated public java.math.BigDecimal frontLeft;
  @Deprecated public java.math.BigDecimal backRight;
  @Deprecated public java.math.BigDecimal backLeft;

  /**
   * Default constructor.  Note that this does not initialize fields
   * to their default values from the schema.  If that is desired then
   * one should use <code>newBuilder()</code>.
   */
  public WheelsAvro() {}

  /**
   * All-args constructor.
   * @param frontRight The new value for frontRight
   * @param frontLeft The new value for frontLeft
   * @param backRight The new value for backRight
   * @param backLeft The new value for backLeft
   */
  public WheelsAvro(java.math.BigDecimal frontRight, java.math.BigDecimal frontLeft, java.math.BigDecimal backRight, java.math.BigDecimal backLeft) {
    this.frontRight = frontRight;
    this.frontLeft = frontLeft;
    this.backRight = backRight;
    this.backLeft = backLeft;
  }

  public org.apache.avro.specific.SpecificData getSpecificData() { return MODEL$; }
  public org.apache.avro.Schema getSchema() { return SCHEMA$; }
  // Used by DatumWriter.  Applications should not call.
  public java.lang.Object get(int field$) {
    switch (field$) {
    case 0: return frontRight;
    case 1: return frontLeft;
    case 2: return backRight;
    case 3: return backLeft;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }

  // Used by DatumReader.  Applications should not call.
  @SuppressWarnings(value="unchecked")
  public void put(int field$, java.lang.Object value$) {
    switch (field$) {
    case 0: frontRight = (java.math.BigDecimal)value$; break;
    case 1: frontLeft = (java.math.BigDecimal)value$; break;
    case 2: backRight = (java.math.BigDecimal)value$; break;
    case 3: backLeft = (java.math.BigDecimal)value$; break;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }

  /**
   * Gets the value of the 'frontRight' field.
   * @return The value of the 'frontRight' field.
   */
  public java.math.BigDecimal getFrontRight() {
    return frontRight;
  }


  /**
   * Sets the value of the 'frontRight' field.
   * @param value the value to set.
   */
  public void setFrontRight(java.math.BigDecimal value) {
    this.frontRight = value;
  }

  /**
   * Gets the value of the 'frontLeft' field.
   * @return The value of the 'frontLeft' field.
   */
  public java.math.BigDecimal getFrontLeft() {
    return frontLeft;
  }


  /**
   * Sets the value of the 'frontLeft' field.
   * @param value the value to set.
   */
  public void setFrontLeft(java.math.BigDecimal value) {
    this.frontLeft = value;
  }

  /**
   * Gets the value of the 'backRight' field.
   * @return The value of the 'backRight' field.
   */
  public java.math.BigDecimal getBackRight() {
    return backRight;
  }


  /**
   * Sets the value of the 'backRight' field.
   * @param value the value to set.
   */
  public void setBackRight(java.math.BigDecimal value) {
    this.backRight = value;
  }

  /**
   * Gets the value of the 'backLeft' field.
   * @return The value of the 'backLeft' field.
   */
  public java.math.BigDecimal getBackLeft() {
    return backLeft;
  }


  /**
   * Sets the value of the 'backLeft' field.
   * @param value the value to set.
   */
  public void setBackLeft(java.math.BigDecimal value) {
    this.backLeft = value;
  }

  /**
   * Creates a new WheelsAvro RecordBuilder.
   * @return A new WheelsAvro RecordBuilder
   */
  public static com.datawhisperers.restfulexample.avromodel.WheelsAvro.Builder newBuilder() {
    return new com.datawhisperers.restfulexample.avromodel.WheelsAvro.Builder();
  }

  /**
   * Creates a new WheelsAvro RecordBuilder by copying an existing Builder.
   * @param other The existing builder to copy.
   * @return A new WheelsAvro RecordBuilder
   */
  public static com.datawhisperers.restfulexample.avromodel.WheelsAvro.Builder newBuilder(com.datawhisperers.restfulexample.avromodel.WheelsAvro.Builder other) {
    if (other == null) {
      return new com.datawhisperers.restfulexample.avromodel.WheelsAvro.Builder();
    } else {
      return new com.datawhisperers.restfulexample.avromodel.WheelsAvro.Builder(other);
    }
  }

  /**
   * Creates a new WheelsAvro RecordBuilder by copying an existing WheelsAvro instance.
   * @param other The existing instance to copy.
   * @return A new WheelsAvro RecordBuilder
   */
  public static com.datawhisperers.restfulexample.avromodel.WheelsAvro.Builder newBuilder(com.datawhisperers.restfulexample.avromodel.WheelsAvro other) {
    if (other == null) {
      return new com.datawhisperers.restfulexample.avromodel.WheelsAvro.Builder();
    } else {
      return new com.datawhisperers.restfulexample.avromodel.WheelsAvro.Builder(other);
    }
  }

  /**
   * RecordBuilder for WheelsAvro instances.
   */
  public static class Builder extends org.apache.avro.specific.SpecificRecordBuilderBase<WheelsAvro>
    implements org.apache.avro.data.RecordBuilder<WheelsAvro> {

    private java.math.BigDecimal frontRight;
    private java.math.BigDecimal frontLeft;
    private java.math.BigDecimal backRight;
    private java.math.BigDecimal backLeft;

    /** Creates a new Builder */
    private Builder() {
      super(SCHEMA$);
    }

    /**
     * Creates a Builder by copying an existing Builder.
     * @param other The existing Builder to copy.
     */
    private Builder(com.datawhisperers.restfulexample.avromodel.WheelsAvro.Builder other) {
      super(other);
      if (isValidValue(fields()[0], other.frontRight)) {
        this.frontRight = data().deepCopy(fields()[0].schema(), other.frontRight);
        fieldSetFlags()[0] = other.fieldSetFlags()[0];
      }
      if (isValidValue(fields()[1], other.frontLeft)) {
        this.frontLeft = data().deepCopy(fields()[1].schema(), other.frontLeft);
        fieldSetFlags()[1] = other.fieldSetFlags()[1];
      }
      if (isValidValue(fields()[2], other.backRight)) {
        this.backRight = data().deepCopy(fields()[2].schema(), other.backRight);
        fieldSetFlags()[2] = other.fieldSetFlags()[2];
      }
      if (isValidValue(fields()[3], other.backLeft)) {
        this.backLeft = data().deepCopy(fields()[3].schema(), other.backLeft);
        fieldSetFlags()[3] = other.fieldSetFlags()[3];
      }
    }

    /**
     * Creates a Builder by copying an existing WheelsAvro instance
     * @param other The existing instance to copy.
     */
    private Builder(com.datawhisperers.restfulexample.avromodel.WheelsAvro other) {
      super(SCHEMA$);
      if (isValidValue(fields()[0], other.frontRight)) {
        this.frontRight = data().deepCopy(fields()[0].schema(), other.frontRight);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.frontLeft)) {
        this.frontLeft = data().deepCopy(fields()[1].schema(), other.frontLeft);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.backRight)) {
        this.backRight = data().deepCopy(fields()[2].schema(), other.backRight);
        fieldSetFlags()[2] = true;
      }
      if (isValidValue(fields()[3], other.backLeft)) {
        this.backLeft = data().deepCopy(fields()[3].schema(), other.backLeft);
        fieldSetFlags()[3] = true;
      }
    }

    /**
      * Gets the value of the 'frontRight' field.
      * @return The value.
      */
    public java.math.BigDecimal getFrontRight() {
      return frontRight;
    }


    /**
      * Sets the value of the 'frontRight' field.
      * @param value The value of 'frontRight'.
      * @return This builder.
      */
    public com.datawhisperers.restfulexample.avromodel.WheelsAvro.Builder setFrontRight(java.math.BigDecimal value) {
      validate(fields()[0], value);
      this.frontRight = value;
      fieldSetFlags()[0] = true;
      return this;
    }

    /**
      * Checks whether the 'frontRight' field has been set.
      * @return True if the 'frontRight' field has been set, false otherwise.
      */
    public boolean hasFrontRight() {
      return fieldSetFlags()[0];
    }


    /**
      * Clears the value of the 'frontRight' field.
      * @return This builder.
      */
    public com.datawhisperers.restfulexample.avromodel.WheelsAvro.Builder clearFrontRight() {
      frontRight = null;
      fieldSetFlags()[0] = false;
      return this;
    }

    /**
      * Gets the value of the 'frontLeft' field.
      * @return The value.
      */
    public java.math.BigDecimal getFrontLeft() {
      return frontLeft;
    }


    /**
      * Sets the value of the 'frontLeft' field.
      * @param value The value of 'frontLeft'.
      * @return This builder.
      */
    public com.datawhisperers.restfulexample.avromodel.WheelsAvro.Builder setFrontLeft(java.math.BigDecimal value) {
      validate(fields()[1], value);
      this.frontLeft = value;
      fieldSetFlags()[1] = true;
      return this;
    }

    /**
      * Checks whether the 'frontLeft' field has been set.
      * @return True if the 'frontLeft' field has been set, false otherwise.
      */
    public boolean hasFrontLeft() {
      return fieldSetFlags()[1];
    }


    /**
      * Clears the value of the 'frontLeft' field.
      * @return This builder.
      */
    public com.datawhisperers.restfulexample.avromodel.WheelsAvro.Builder clearFrontLeft() {
      frontLeft = null;
      fieldSetFlags()[1] = false;
      return this;
    }

    /**
      * Gets the value of the 'backRight' field.
      * @return The value.
      */
    public java.math.BigDecimal getBackRight() {
      return backRight;
    }


    /**
      * Sets the value of the 'backRight' field.
      * @param value The value of 'backRight'.
      * @return This builder.
      */
    public com.datawhisperers.restfulexample.avromodel.WheelsAvro.Builder setBackRight(java.math.BigDecimal value) {
      validate(fields()[2], value);
      this.backRight = value;
      fieldSetFlags()[2] = true;
      return this;
    }

    /**
      * Checks whether the 'backRight' field has been set.
      * @return True if the 'backRight' field has been set, false otherwise.
      */
    public boolean hasBackRight() {
      return fieldSetFlags()[2];
    }


    /**
      * Clears the value of the 'backRight' field.
      * @return This builder.
      */
    public com.datawhisperers.restfulexample.avromodel.WheelsAvro.Builder clearBackRight() {
      backRight = null;
      fieldSetFlags()[2] = false;
      return this;
    }

    /**
      * Gets the value of the 'backLeft' field.
      * @return The value.
      */
    public java.math.BigDecimal getBackLeft() {
      return backLeft;
    }


    /**
      * Sets the value of the 'backLeft' field.
      * @param value The value of 'backLeft'.
      * @return This builder.
      */
    public com.datawhisperers.restfulexample.avromodel.WheelsAvro.Builder setBackLeft(java.math.BigDecimal value) {
      validate(fields()[3], value);
      this.backLeft = value;
      fieldSetFlags()[3] = true;
      return this;
    }

    /**
      * Checks whether the 'backLeft' field has been set.
      * @return True if the 'backLeft' field has been set, false otherwise.
      */
    public boolean hasBackLeft() {
      return fieldSetFlags()[3];
    }


    /**
      * Clears the value of the 'backLeft' field.
      * @return This builder.
      */
    public com.datawhisperers.restfulexample.avromodel.WheelsAvro.Builder clearBackLeft() {
      backLeft = null;
      fieldSetFlags()[3] = false;
      return this;
    }

    @Override
    @SuppressWarnings("unchecked")
    public WheelsAvro build() {
      try {
        WheelsAvro record = new WheelsAvro();
        record.frontRight = fieldSetFlags()[0] ? this.frontRight : (java.math.BigDecimal) defaultValue(fields()[0]);
        record.frontLeft = fieldSetFlags()[1] ? this.frontLeft : (java.math.BigDecimal) defaultValue(fields()[1]);
        record.backRight = fieldSetFlags()[2] ? this.backRight : (java.math.BigDecimal) defaultValue(fields()[2]);
        record.backLeft = fieldSetFlags()[3] ? this.backLeft : (java.math.BigDecimal) defaultValue(fields()[3]);
        return record;
      } catch (org.apache.avro.AvroMissingFieldException e) {
        throw e;
      } catch (java.lang.Exception e) {
        throw new org.apache.avro.AvroRuntimeException(e);
      }
    }
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumWriter<WheelsAvro>
    WRITER$ = (org.apache.avro.io.DatumWriter<WheelsAvro>)MODEL$.createDatumWriter(SCHEMA$);

  @Override public void writeExternal(java.io.ObjectOutput out)
    throws java.io.IOException {
    WRITER$.write(this, SpecificData.getEncoder(out));
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumReader<WheelsAvro>
    READER$ = (org.apache.avro.io.DatumReader<WheelsAvro>)MODEL$.createDatumReader(SCHEMA$);

  @Override public void readExternal(java.io.ObjectInput in)
    throws java.io.IOException {
    READER$.read(this, SpecificData.getDecoder(in));
  }

  @Override protected boolean hasCustomCoders() { return true; }

  @Override public void customEncode(org.apache.avro.io.Encoder out)
    throws java.io.IOException
  {
    out.writeString(this.frontRight.toString());

    out.writeString(this.frontLeft.toString());

    out.writeString(this.backRight.toString());

    out.writeString(this.backLeft.toString());

  }

  @Override public void customDecode(org.apache.avro.io.ResolvingDecoder in)
    throws java.io.IOException
  {
    org.apache.avro.Schema.Field[] fieldOrder = in.readFieldOrderIfDiff();
    if (fieldOrder == null) {
      this.frontRight = new java.math.BigDecimal(in.readString());

      this.frontLeft = new java.math.BigDecimal(in.readString());

      this.backRight = new java.math.BigDecimal(in.readString());

      this.backLeft = new java.math.BigDecimal(in.readString());

    } else {
      for (int i = 0; i < 4; i++) {
        switch (fieldOrder[i].pos()) {
        case 0:
          this.frontRight = new java.math.BigDecimal(in.readString());
          break;

        case 1:
          this.frontLeft = new java.math.BigDecimal(in.readString());
          break;

        case 2:
          this.backRight = new java.math.BigDecimal(in.readString());
          break;

        case 3:
          this.backLeft = new java.math.BigDecimal(in.readString());
          break;

        default:
          throw new java.io.IOException("Corrupt ResolvingDecoder.");
        }
      }
    }
  }
}











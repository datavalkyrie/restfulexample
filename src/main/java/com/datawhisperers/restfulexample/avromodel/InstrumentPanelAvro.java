/**
 * Autogenerated by Avro
 *
 * DO NOT EDIT DIRECTLY
 */
package com.datawhisperers.restfulexample.avromodel;

import org.apache.avro.generic.GenericArray;
import org.apache.avro.specific.SpecificData;
import org.apache.avro.util.Utf8;
import org.apache.avro.message.BinaryMessageEncoder;
import org.apache.avro.message.BinaryMessageDecoder;
import org.apache.avro.message.SchemaStore;

@org.apache.avro.specific.AvroGenerated
public class InstrumentPanelAvro extends org.apache.avro.specific.SpecificRecordBase implements org.apache.avro.specific.SpecificRecord {
  private static final long serialVersionUID = -3427298069743253398L;
  public static final org.apache.avro.Schema SCHEMA$ = new org.apache.avro.Schema.Parser().parse("{\"type\":\"record\",\"name\":\"InstrumentPanelAvro\",\"namespace\":\"com.datawhisperers.restfulexample.avromodel\",\"fields\":[{\"name\":\"turnSignal\",\"type\":\"string\"},{\"name\":\"wipers\",\"type\":\"boolean\"},{\"name\":\"lights\",\"type\":\"string\"},{\"name\":\"seatBeltCount\",\"type\":\"int\"},{\"name\":\"outsideTemp\",\"type\":\"double\"}]}");
  public static org.apache.avro.Schema getClassSchema() { return SCHEMA$; }

  private static SpecificData MODEL$ = new SpecificData();

  private static final BinaryMessageEncoder<InstrumentPanelAvro> ENCODER =
      new BinaryMessageEncoder<InstrumentPanelAvro>(MODEL$, SCHEMA$);

  private static final BinaryMessageDecoder<InstrumentPanelAvro> DECODER =
      new BinaryMessageDecoder<InstrumentPanelAvro>(MODEL$, SCHEMA$);

  /**
   * Return the BinaryMessageEncoder instance used by this class.
   * @return the message encoder used by this class
   */
  public static BinaryMessageEncoder<InstrumentPanelAvro> getEncoder() {
    return ENCODER;
  }

  /**
   * Return the BinaryMessageDecoder instance used by this class.
   * @return the message decoder used by this class
   */
  public static BinaryMessageDecoder<InstrumentPanelAvro> getDecoder() {
    return DECODER;
  }

  /**
   * Create a new BinaryMessageDecoder instance for this class that uses the specified {@link SchemaStore}.
   * @param resolver a {@link SchemaStore} used to find schemas by fingerprint
   * @return a BinaryMessageDecoder instance for this class backed by the given SchemaStore
   */
  public static BinaryMessageDecoder<InstrumentPanelAvro> createDecoder(SchemaStore resolver) {
    return new BinaryMessageDecoder<InstrumentPanelAvro>(MODEL$, SCHEMA$, resolver);
  }

  /**
   * Serializes this InstrumentPanelAvro to a ByteBuffer.
   * @return a buffer holding the serialized data for this instance
   * @throws java.io.IOException if this instance could not be serialized
   */
  public java.nio.ByteBuffer toByteBuffer() throws java.io.IOException {
    return ENCODER.encode(this);
  }

  /**
   * Deserializes a InstrumentPanelAvro from a ByteBuffer.
   * @param b a byte buffer holding serialized data for an instance of this class
   * @return a InstrumentPanelAvro instance decoded from the given buffer
   * @throws java.io.IOException if the given bytes could not be deserialized into an instance of this class
   */
  public static InstrumentPanelAvro fromByteBuffer(
      java.nio.ByteBuffer b) throws java.io.IOException {
    return DECODER.decode(b);
  }

  @Deprecated public java.lang.CharSequence turnSignal;
  @Deprecated public boolean wipers;
  @Deprecated public java.lang.CharSequence lights;
  @Deprecated public int seatBeltCount;
  @Deprecated public double outsideTemp;

  /**
   * Default constructor.  Note that this does not initialize fields
   * to their default values from the schema.  If that is desired then
   * one should use <code>newBuilder()</code>.
   */
  public InstrumentPanelAvro() {}

  /**
   * All-args constructor.
   * @param turnSignal The new value for turnSignal
   * @param wipers The new value for wipers
   * @param lights The new value for lights
   * @param seatBeltCount The new value for seatBeltCount
   * @param outsideTemp The new value for outsideTemp
   */
  public InstrumentPanelAvro(java.lang.CharSequence turnSignal, java.lang.Boolean wipers, java.lang.CharSequence lights, java.lang.Integer seatBeltCount, java.lang.Double outsideTemp) {
    this.turnSignal = turnSignal;
    this.wipers = wipers;
    this.lights = lights;
    this.seatBeltCount = seatBeltCount;
    this.outsideTemp = outsideTemp;
  }

  public org.apache.avro.specific.SpecificData getSpecificData() { return MODEL$; }
  public org.apache.avro.Schema getSchema() { return SCHEMA$; }
  // Used by DatumWriter.  Applications should not call.
  public java.lang.Object get(int field$) {
    switch (field$) {
    case 0: return turnSignal;
    case 1: return wipers;
    case 2: return lights;
    case 3: return seatBeltCount;
    case 4: return outsideTemp;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }

  // Used by DatumReader.  Applications should not call.
  @SuppressWarnings(value="unchecked")
  public void put(int field$, java.lang.Object value$) {
    switch (field$) {
    case 0: turnSignal = (java.lang.CharSequence)value$; break;
    case 1: wipers = (java.lang.Boolean)value$; break;
    case 2: lights = (java.lang.CharSequence)value$; break;
    case 3: seatBeltCount = (java.lang.Integer)value$; break;
    case 4: outsideTemp = (java.lang.Double)value$; break;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }

  /**
   * Gets the value of the 'turnSignal' field.
   * @return The value of the 'turnSignal' field.
   */
  public java.lang.CharSequence getTurnSignal() {
    return turnSignal;
  }


  /**
   * Sets the value of the 'turnSignal' field.
   * @param value the value to set.
   */
  public void setTurnSignal(java.lang.CharSequence value) {
    this.turnSignal = value;
  }

  /**
   * Gets the value of the 'wipers' field.
   * @return The value of the 'wipers' field.
   */
  public boolean getWipers() {
    return wipers;
  }


  /**
   * Sets the value of the 'wipers' field.
   * @param value the value to set.
   */
  public void setWipers(boolean value) {
    this.wipers = value;
  }

  /**
   * Gets the value of the 'lights' field.
   * @return The value of the 'lights' field.
   */
  public java.lang.CharSequence getLights() {
    return lights;
  }


  /**
   * Sets the value of the 'lights' field.
   * @param value the value to set.
   */
  public void setLights(java.lang.CharSequence value) {
    this.lights = value;
  }

  /**
   * Gets the value of the 'seatBeltCount' field.
   * @return The value of the 'seatBeltCount' field.
   */
  public int getSeatBeltCount() {
    return seatBeltCount;
  }


  /**
   * Sets the value of the 'seatBeltCount' field.
   * @param value the value to set.
   */
  public void setSeatBeltCount(int value) {
    this.seatBeltCount = value;
  }

  /**
   * Gets the value of the 'outsideTemp' field.
   * @return The value of the 'outsideTemp' field.
   */
  public double getOutsideTemp() {
    return outsideTemp;
  }


  /**
   * Sets the value of the 'outsideTemp' field.
   * @param value the value to set.
   */
  public void setOutsideTemp(double value) {
    this.outsideTemp = value;
  }

  /**
   * Creates a new InstrumentPanelAvro RecordBuilder.
   * @return A new InstrumentPanelAvro RecordBuilder
   */
  public static com.datawhisperers.restfulexample.avromodel.InstrumentPanelAvro.Builder newBuilder() {
    return new com.datawhisperers.restfulexample.avromodel.InstrumentPanelAvro.Builder();
  }

  /**
   * Creates a new InstrumentPanelAvro RecordBuilder by copying an existing Builder.
   * @param other The existing builder to copy.
   * @return A new InstrumentPanelAvro RecordBuilder
   */
  public static com.datawhisperers.restfulexample.avromodel.InstrumentPanelAvro.Builder newBuilder(com.datawhisperers.restfulexample.avromodel.InstrumentPanelAvro.Builder other) {
    if (other == null) {
      return new com.datawhisperers.restfulexample.avromodel.InstrumentPanelAvro.Builder();
    } else {
      return new com.datawhisperers.restfulexample.avromodel.InstrumentPanelAvro.Builder(other);
    }
  }

  /**
   * Creates a new InstrumentPanelAvro RecordBuilder by copying an existing InstrumentPanelAvro instance.
   * @param other The existing instance to copy.
   * @return A new InstrumentPanelAvro RecordBuilder
   */
  public static com.datawhisperers.restfulexample.avromodel.InstrumentPanelAvro.Builder newBuilder(com.datawhisperers.restfulexample.avromodel.InstrumentPanelAvro other) {
    if (other == null) {
      return new com.datawhisperers.restfulexample.avromodel.InstrumentPanelAvro.Builder();
    } else {
      return new com.datawhisperers.restfulexample.avromodel.InstrumentPanelAvro.Builder(other);
    }
  }

  /**
   * RecordBuilder for InstrumentPanelAvro instances.
   */
  public static class Builder extends org.apache.avro.specific.SpecificRecordBuilderBase<InstrumentPanelAvro>
    implements org.apache.avro.data.RecordBuilder<InstrumentPanelAvro> {

    private java.lang.CharSequence turnSignal;
    private boolean wipers;
    private java.lang.CharSequence lights;
    private int seatBeltCount;
    private double outsideTemp;

    /** Creates a new Builder */
    private Builder() {
      super(SCHEMA$);
    }

    /**
     * Creates a Builder by copying an existing Builder.
     * @param other The existing Builder to copy.
     */
    private Builder(com.datawhisperers.restfulexample.avromodel.InstrumentPanelAvro.Builder other) {
      super(other);
      if (isValidValue(fields()[0], other.turnSignal)) {
        this.turnSignal = data().deepCopy(fields()[0].schema(), other.turnSignal);
        fieldSetFlags()[0] = other.fieldSetFlags()[0];
      }
      if (isValidValue(fields()[1], other.wipers)) {
        this.wipers = data().deepCopy(fields()[1].schema(), other.wipers);
        fieldSetFlags()[1] = other.fieldSetFlags()[1];
      }
      if (isValidValue(fields()[2], other.lights)) {
        this.lights = data().deepCopy(fields()[2].schema(), other.lights);
        fieldSetFlags()[2] = other.fieldSetFlags()[2];
      }
      if (isValidValue(fields()[3], other.seatBeltCount)) {
        this.seatBeltCount = data().deepCopy(fields()[3].schema(), other.seatBeltCount);
        fieldSetFlags()[3] = other.fieldSetFlags()[3];
      }
      if (isValidValue(fields()[4], other.outsideTemp)) {
        this.outsideTemp = data().deepCopy(fields()[4].schema(), other.outsideTemp);
        fieldSetFlags()[4] = other.fieldSetFlags()[4];
      }
    }

    /**
     * Creates a Builder by copying an existing InstrumentPanelAvro instance
     * @param other The existing instance to copy.
     */
    private Builder(com.datawhisperers.restfulexample.avromodel.InstrumentPanelAvro other) {
      super(SCHEMA$);
      if (isValidValue(fields()[0], other.turnSignal)) {
        this.turnSignal = data().deepCopy(fields()[0].schema(), other.turnSignal);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.wipers)) {
        this.wipers = data().deepCopy(fields()[1].schema(), other.wipers);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.lights)) {
        this.lights = data().deepCopy(fields()[2].schema(), other.lights);
        fieldSetFlags()[2] = true;
      }
      if (isValidValue(fields()[3], other.seatBeltCount)) {
        this.seatBeltCount = data().deepCopy(fields()[3].schema(), other.seatBeltCount);
        fieldSetFlags()[3] = true;
      }
      if (isValidValue(fields()[4], other.outsideTemp)) {
        this.outsideTemp = data().deepCopy(fields()[4].schema(), other.outsideTemp);
        fieldSetFlags()[4] = true;
      }
    }

    /**
      * Gets the value of the 'turnSignal' field.
      * @return The value.
      */
    public java.lang.CharSequence getTurnSignal() {
      return turnSignal;
    }


    /**
      * Sets the value of the 'turnSignal' field.
      * @param value The value of 'turnSignal'.
      * @return This builder.
      */
    public com.datawhisperers.restfulexample.avromodel.InstrumentPanelAvro.Builder setTurnSignal(java.lang.CharSequence value) {
      validate(fields()[0], value);
      this.turnSignal = value;
      fieldSetFlags()[0] = true;
      return this;
    }

    /**
      * Checks whether the 'turnSignal' field has been set.
      * @return True if the 'turnSignal' field has been set, false otherwise.
      */
    public boolean hasTurnSignal() {
      return fieldSetFlags()[0];
    }


    /**
      * Clears the value of the 'turnSignal' field.
      * @return This builder.
      */
    public com.datawhisperers.restfulexample.avromodel.InstrumentPanelAvro.Builder clearTurnSignal() {
      turnSignal = null;
      fieldSetFlags()[0] = false;
      return this;
    }

    /**
      * Gets the value of the 'wipers' field.
      * @return The value.
      */
    public boolean getWipers() {
      return wipers;
    }


    /**
      * Sets the value of the 'wipers' field.
      * @param value The value of 'wipers'.
      * @return This builder.
      */
    public com.datawhisperers.restfulexample.avromodel.InstrumentPanelAvro.Builder setWipers(boolean value) {
      validate(fields()[1], value);
      this.wipers = value;
      fieldSetFlags()[1] = true;
      return this;
    }

    /**
      * Checks whether the 'wipers' field has been set.
      * @return True if the 'wipers' field has been set, false otherwise.
      */
    public boolean hasWipers() {
      return fieldSetFlags()[1];
    }


    /**
      * Clears the value of the 'wipers' field.
      * @return This builder.
      */
    public com.datawhisperers.restfulexample.avromodel.InstrumentPanelAvro.Builder clearWipers() {
      fieldSetFlags()[1] = false;
      return this;
    }

    /**
      * Gets the value of the 'lights' field.
      * @return The value.
      */
    public java.lang.CharSequence getLights() {
      return lights;
    }


    /**
      * Sets the value of the 'lights' field.
      * @param value The value of 'lights'.
      * @return This builder.
      */
    public com.datawhisperers.restfulexample.avromodel.InstrumentPanelAvro.Builder setLights(java.lang.CharSequence value) {
      validate(fields()[2], value);
      this.lights = value;
      fieldSetFlags()[2] = true;
      return this;
    }

    /**
      * Checks whether the 'lights' field has been set.
      * @return True if the 'lights' field has been set, false otherwise.
      */
    public boolean hasLights() {
      return fieldSetFlags()[2];
    }


    /**
      * Clears the value of the 'lights' field.
      * @return This builder.
      */
    public com.datawhisperers.restfulexample.avromodel.InstrumentPanelAvro.Builder clearLights() {
      lights = null;
      fieldSetFlags()[2] = false;
      return this;
    }

    /**
      * Gets the value of the 'seatBeltCount' field.
      * @return The value.
      */
    public int getSeatBeltCount() {
      return seatBeltCount;
    }


    /**
      * Sets the value of the 'seatBeltCount' field.
      * @param value The value of 'seatBeltCount'.
      * @return This builder.
      */
    public com.datawhisperers.restfulexample.avromodel.InstrumentPanelAvro.Builder setSeatBeltCount(int value) {
      validate(fields()[3], value);
      this.seatBeltCount = value;
      fieldSetFlags()[3] = true;
      return this;
    }

    /**
      * Checks whether the 'seatBeltCount' field has been set.
      * @return True if the 'seatBeltCount' field has been set, false otherwise.
      */
    public boolean hasSeatBeltCount() {
      return fieldSetFlags()[3];
    }


    /**
      * Clears the value of the 'seatBeltCount' field.
      * @return This builder.
      */
    public com.datawhisperers.restfulexample.avromodel.InstrumentPanelAvro.Builder clearSeatBeltCount() {
      fieldSetFlags()[3] = false;
      return this;
    }

    /**
      * Gets the value of the 'outsideTemp' field.
      * @return The value.
      */
    public double getOutsideTemp() {
      return outsideTemp;
    }


    /**
      * Sets the value of the 'outsideTemp' field.
      * @param value The value of 'outsideTemp'.
      * @return This builder.
      */
    public com.datawhisperers.restfulexample.avromodel.InstrumentPanelAvro.Builder setOutsideTemp(double value) {
      validate(fields()[4], value);
      this.outsideTemp = value;
      fieldSetFlags()[4] = true;
      return this;
    }

    /**
      * Checks whether the 'outsideTemp' field has been set.
      * @return True if the 'outsideTemp' field has been set, false otherwise.
      */
    public boolean hasOutsideTemp() {
      return fieldSetFlags()[4];
    }


    /**
      * Clears the value of the 'outsideTemp' field.
      * @return This builder.
      */
    public com.datawhisperers.restfulexample.avromodel.InstrumentPanelAvro.Builder clearOutsideTemp() {
      fieldSetFlags()[4] = false;
      return this;
    }

    @Override
    @SuppressWarnings("unchecked")
    public InstrumentPanelAvro build() {
      try {
        InstrumentPanelAvro record = new InstrumentPanelAvro();
        record.turnSignal = fieldSetFlags()[0] ? this.turnSignal : (java.lang.CharSequence) defaultValue(fields()[0]);
        record.wipers = fieldSetFlags()[1] ? this.wipers : (java.lang.Boolean) defaultValue(fields()[1]);
        record.lights = fieldSetFlags()[2] ? this.lights : (java.lang.CharSequence) defaultValue(fields()[2]);
        record.seatBeltCount = fieldSetFlags()[3] ? this.seatBeltCount : (java.lang.Integer) defaultValue(fields()[3]);
        record.outsideTemp = fieldSetFlags()[4] ? this.outsideTemp : (java.lang.Double) defaultValue(fields()[4]);
        return record;
      } catch (org.apache.avro.AvroMissingFieldException e) {
        throw e;
      } catch (java.lang.Exception e) {
        throw new org.apache.avro.AvroRuntimeException(e);
      }
    }
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumWriter<InstrumentPanelAvro>
    WRITER$ = (org.apache.avro.io.DatumWriter<InstrumentPanelAvro>)MODEL$.createDatumWriter(SCHEMA$);

  @Override public void writeExternal(java.io.ObjectOutput out)
    throws java.io.IOException {
    WRITER$.write(this, SpecificData.getEncoder(out));
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumReader<InstrumentPanelAvro>
    READER$ = (org.apache.avro.io.DatumReader<InstrumentPanelAvro>)MODEL$.createDatumReader(SCHEMA$);

  @Override public void readExternal(java.io.ObjectInput in)
    throws java.io.IOException {
    READER$.read(this, SpecificData.getDecoder(in));
  }

  @Override protected boolean hasCustomCoders() { return true; }

  @Override public void customEncode(org.apache.avro.io.Encoder out)
    throws java.io.IOException
  {
    out.writeString(this.turnSignal);

    out.writeBoolean(this.wipers);

    out.writeString(this.lights);

    out.writeInt(this.seatBeltCount);

    out.writeDouble(this.outsideTemp);

  }

  @Override public void customDecode(org.apache.avro.io.ResolvingDecoder in)
    throws java.io.IOException
  {
    org.apache.avro.Schema.Field[] fieldOrder = in.readFieldOrderIfDiff();
    if (fieldOrder == null) {
      this.turnSignal = in.readString(this.turnSignal instanceof Utf8 ? (Utf8)this.turnSignal : null);

      this.wipers = in.readBoolean();

      this.lights = in.readString(this.lights instanceof Utf8 ? (Utf8)this.lights : null);

      this.seatBeltCount = in.readInt();

      this.outsideTemp = in.readDouble();

    } else {
      for (int i = 0; i < 5; i++) {
        switch (fieldOrder[i].pos()) {
        case 0:
          this.turnSignal = in.readString(this.turnSignal instanceof Utf8 ? (Utf8)this.turnSignal : null);
          break;

        case 1:
          this.wipers = in.readBoolean();
          break;

        case 2:
          this.lights = in.readString(this.lights instanceof Utf8 ? (Utf8)this.lights : null);
          break;

        case 3:
          this.seatBeltCount = in.readInt();
          break;

        case 4:
          this.outsideTemp = in.readDouble();
          break;

        default:
          throw new java.io.IOException("Corrupt ResolvingDecoder.");
        }
      }
    }
  }
}










